Description: >
  Excercicio da turma 1 do AWS Expert da LinuxTips.
  Testado na região Norte da Virginia (us-east-1) e América do Sul (sa-east-1)

# Adição de parâmetros
Parameters: 
  KeyName:
    Default: aws-class-2
    Description: Key Pair para acesso ao servidor usando SSH
    ConstraintDescription: Deve ser adicionado o nome do Key Pair existente
    Type: "AWS::EC2::KeyPair::KeyName"
  MyPublicIP:
    Default: 0.0.0.0/0
    Description: IP publico que tera acesso ao servidor
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

# Declarando os mapeamentos
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-07ebfd5b3428b6f4d
    sa-east-1:
      AMIID: ami-05494b93950efa2fd

Resources:
# Criando o grupo Operations
  GroupOperations:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: Operations

# Criando o IAM Role
  IamRolePowerUsers:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PowerUsers
      Groups:
        - !Ref GroupOperations
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            NotAction:
              - "iam:*"
              - "organizations:*"
              - "account:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:CreateServiceLinkedRole"
              - "iam:DeleteServiceLinkedRole"
              - "iam:ListRoles"
              - "organizations:DescribeOrganization"
              - "account:ListRegions"
            Resource: "*"

# Criando Politica do S3 para acesso do CloudTrail
  S3CloudTrailPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3CloudTrail
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${S3CloudTrail}
          - Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${S3CloudTrail}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

# Criando o S3 para o CloudTrail
  S3CloudTrail:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Publica
        - Key: environment
          Value: develop

# Configurando o CloudTrail
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref S3CloudTrail
    DependsOn: 
      - S3CloudTrail
      - S3CloudTrailPolicy

# Criando Role para o AWS Config
  IamRoleAwsConfigEC2:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "config.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']

# Criando Politica do S3 para acesso do AWS Config
  S3AWSConfigPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3AWSConfig
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Sid: "AWSConfigBucketPermissionsCheck"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${S3AWSConfig}
          - Sid: "AWSConfigBucketExistenceCheck"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Action: "s3:ListBucket"
            Resource:
              !Sub |-
                arn:aws:s3:::${S3AWSConfig}
          - Sid: "AWSConfigBucketDelivery"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Action: "s3:PutObject"
            Resource: 
              !Sub |-
                arn:aws:s3:::${S3AWSConfig}/AWSLogs/${AWS::AccountId}/Config/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

# Criando o S3 para o AWS Config
  S3AWSConfig:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: {}

# Criando um DeliveryChannel
  DeliveryChannel: 
    Type: AWS::Config::DeliveryChannel
    Properties: 
      ConfigSnapshotDeliveryProperties: 
        DeliveryFrequency: "Six_Hours"
      S3BucketName: !Ref S3AWSConfig
    DependsOn:
      - S3AWSConfig

# Criando um Configuration Recorder no AWS Config
  ConfigRecorder: 
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RoleARN: !GetAtt IamRoleAwsConfigEC2.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
    DependsOn:
      - IamRoleAwsConfigEC2
      - S3AWSConfig

# Habilitando regras no AWS Config
  ConfigRuleRequiredTags:
    Type: AWS::Config::ConfigRule
    Properties:
      InputParameters: 
        tag1Key: Name
        tag2Key: environment
      Source:
        Owner: AWS
        SourceIdentifier: "REQUIRED_TAGS"
    DependsOn:
      - ConfigRecorder

  ConfigRuleRootAccountMFAEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      Source:
        Owner: AWS
        SourceIdentifier: "ROOT_ACCOUNT_MFA_ENABLED"
    DependsOn:
      - ConfigRecorder

  ConfigRuleIamPasswordPolicy:
    Type: AWS::Config::ConfigRule
    Properties:
      Source:
        Owner: AWS
        SourceIdentifier: "IAM_PASSWORD_POLICY"
    DependsOn:
      - ConfigRecorder

  ConfigRuleApprovedAmisById:
    Type: AWS::Config::ConfigRule
    Properties:
      InputParameters: 
        amiIds:
          !FindInMap
          - AWSRegionToAMI
          - !Ref AWS::Region
          - AMIID
      Source:
        Owner: AWS
        SourceIdentifier: "APPROVED_AMIS_BY_ID"
    DependsOn:
      - ConfigRecorder

# Criando o VPC
  NovoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Giropops
      - Key: environment
        Value: develop

# Criando o Internet Gateway
  NovoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-IGW
      - Key: environment
        Value: develop
    DependsOn: NovoVPC

# Adicionando o Internet Gateway na VPC
  NovoAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NovoVPC
      InternetGatewayId: !Ref NovoInternetGateway

# Criando a subnet Pública
  NovaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.1.0/24
      VpcId: !Ref NovoVPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Publica
      - Key: environment
        Value: develop
    DependsOn: NovoVPC

#Criando a subnet Privada
  NovaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.10.0/24
      VpcId: !Ref NovoVPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Privada
      - Key: environment
        Value: develop
    DependsOn: NovoVPC

# Criando o Elastic IP para o Nat Gateway
  NatGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: NovoVPC

# Criando o NAT Gateway
  NovoNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIP.AllocationId
      SubnetId: !Ref NovaSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Privada
      - Key: environment
        Value: develop
    DependsOn: NatGatewayElasticIP

# Criando a route table Privada
  PrivadaRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NovoVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-RT-Privada
      - Key: environment
        Value: develop

# Criando rota para a route table Privada
  PrivadaRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivadaRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NovoNatGateway
    DependsOn:
      - NovoNatGateway
      - PrivadaRouteTableAssociation

# Criando a route table Pública
  PublicaRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NovoVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-RT-Publica
      - Key: environment
        Value: develop

# Criando rota para a route table Pública
  PublicaRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicaRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NovoInternetGateway
    DependsOn:
      - NovoInternetGateway
      - PublicaRouteTableAssociation

# Associando a table de rotas com a subnet Pública
  PublicaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicaRouteTable
      SubnetId: !Ref NovaSubnet1

# Associando a table de rotas com a subnet Privada
  PrivadaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivadaRouteTable
      SubnetId: !Ref NovaSubnet2

# Criando o security group WEB
  NovoWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServers
      GroupDescription: Security Group para os Web Servers
      VpcId: !Ref NovoVPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyPublicIP
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyPublicIP
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-SG-WEB
      - Key: environment
        Value: develop

# Criando o security group DB
  NovoDbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DBServers
      GroupDescription: Security Group para os DB Servers
      VpcId: !Ref NovoVPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyPublicIP
        - 
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt NovoWebSecurityGroup.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-SG-DB
      - Key: environment
        Value: develop

# Criando volume para o DBServer01
  DBVolume01:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      Size: 24
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VOL-DB01
      - Key: environment
        Value: develop
      VolumeType: gp2

# Criando volume para o DBServer02
  DBVolume02:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      Size: 24
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VOL-DB02
      - Key: environment
        Value: develop
      VolumeType: gp2

# Criando EC2 Instance do DB Server01
  NovaDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId:
        !FindInMap
          - AWSRegionToAMI
          - !Ref AWS::Region
          - AMIID
      KeyName: !Ref KeyName
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoDbSecurityGroup
      SubnetId: !Ref NovaSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DB01
      - Key: environment
        Value: develop
      Volumes:
        -
          Device: "/dev/sdf"
          VolumeId: !Ref DBVolume01

# Criando EC2 Instance do DB Server02
  NovaDBInstance02:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId:
        !FindInMap
          - AWSRegionToAMI
          - !Ref AWS::Region
          - AMIID
      KeyName: !Ref KeyName
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoDbSecurityGroup
      SubnetId: !Ref NovaSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DB02
      - Key: environment
        Value: develop
      Volumes:
        -
          Device: "/dev/sdf"
          VolumeId: !Ref DBVolume02

# Criando Elastic IP para o Web Server 01
  NovoElasticIP01:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref NovaWEBInstance01
      Domain: NovoVPC

# Criando Elastic IP para o Web Server 02
  NovoElasticIP02:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref NovaWEBInstance02
      Domain: NovoVPC

# Criando EC2 Instance do WEB Server
  NovaWEBInstance01:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId:
        !FindInMap
          - AWSRegionToAMI
          - !Ref AWS::Region
          - AMIID
      KeyName: !Ref KeyName
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoWebSecurityGroup
      SubnetId: !Ref NovaSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WEB01
      - Key: environment
        Value: develop
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install nginx -y

# Criando EC2 Instance do WEB Server 02
  NovaWEBInstance02:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId:
        !FindInMap
          - AWSRegionToAMI
          - !Ref AWS::Region
          - AMIID
      KeyName: !Ref KeyName
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoWebSecurityGroup
      SubnetId: !Ref NovaSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WEB02
      - Key: environment
        Value: develop
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install nginx -y